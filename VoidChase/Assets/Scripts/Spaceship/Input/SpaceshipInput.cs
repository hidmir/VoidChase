//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Content/Input/SpaceshipInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace VoidChase.Spaceship.Input
{
    public partial class @SpaceshipInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @SpaceshipInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpaceshipInput"",
    ""maps"": [
        {
            ""name"": ""Controlls"",
            ""id"": ""6bf7617a-e54e-4d83-99b1-a0bebd70cfb3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4da2796b-14c8-4cfa-86e8-554110ef5ea7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7e4d83b8-45c3-4aa8-83d9-0f6fecbd8c4d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""02c63317-38ac-4d53-bd19-28ca4e48fbf6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e9a60cb2-e39c-46c7-af3f-b9bfe6fa3cca"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e3664145-e1dd-4deb-8597-d70ff7ef6d18"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""31cedc08-4a9b-44c2-9f03-4d5028d80688"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Controlls
            m_Controlls = asset.FindActionMap("Controlls", throwIfNotFound: true);
            m_Controlls_Movement = m_Controlls.FindAction("Movement", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Controlls
        private readonly InputActionMap m_Controlls;
        private List<IControllsActions> m_ControllsActionsCallbackInterfaces = new List<IControllsActions>();
        private readonly InputAction m_Controlls_Movement;
        public struct ControllsActions
        {
            private @SpaceshipInput m_Wrapper;
            public ControllsActions(@SpaceshipInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Controlls_Movement;
            public InputActionMap Get() { return m_Wrapper.m_Controlls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControllsActions set) { return set.Get(); }
            public void AddCallbacks(IControllsActions instance)
            {
                if (instance == null || m_Wrapper.m_ControllsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ControllsActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }

            private void UnregisterCallbacks(IControllsActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
            }

            public void RemoveCallbacks(IControllsActions instance)
            {
                if (m_Wrapper.m_ControllsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IControllsActions instance)
            {
                foreach (var item in m_Wrapper.m_ControllsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ControllsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ControllsActions @Controlls => new ControllsActions(this);
        public interface IControllsActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
    }
}
