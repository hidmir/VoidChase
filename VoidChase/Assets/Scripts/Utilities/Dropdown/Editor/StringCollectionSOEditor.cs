using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

namespace VoidChase.Utilities.Dropdown
{
	[CustomEditor(typeof(StringCollectionSO))]
	public class StringCollectionSOEditor : Editor
	{
		private const string TARGET_FOLDER = "Assets/Scripts/Generated/";

		public override void OnInspectorGUI ()
		{
			base.OnInspectorGUI();
			GUILayout.Space(10);

			if (GUILayout.Button("Generate Class File"))
			{
				GenerateClassFile();
			}
		}

		private void GenerateClassFile ()
		{
			StringCollectionSO so = (StringCollectionSO) target;

			string className = ToValidName(so.name);
			string fileName = className + ".cs";
			string filePath = Path.Combine(TARGET_FOLDER, fileName);

			if (!Directory.Exists(TARGET_FOLDER))
			{
				Directory.CreateDirectory(TARGET_FOLDER);
			}

			//TODO: Add namespace generation.
			string fileContent =
				$@"// Auto-generated by {nameof(StringCollectionSOEditor)} at {DateTime.Now}.
// Any manual changes to this file may be overwritten.

public static class {className}
{{
{GenerateConstants(so.Collection)}
}}";

			File.WriteAllText(filePath, fileContent);
			AssetDatabase.Refresh();

			MonoScript script = AssetDatabase.LoadAssetAtPath<MonoScript>(filePath);
			Debug.Log($"<b>Generated class file:</b> {filePath}", script);
		}

		private string GenerateConstants (IReadOnlyList<string> collection)
		{
			StringBuilder sb = new ();
			int count = collection.Count;

			for (int index = 0; index < count; index++)
			{
				string rawEntry = collection[index];

				if (string.IsNullOrWhiteSpace(rawEntry))
				{
					continue;
				}

				string constantName = ToValidName(rawEntry);

				sb.Append("\tpublic const string ");
				sb.Append(constantName);
				sb.Append(" = \"");
				sb.Append(rawEntry);
				sb.Append("\";");

				if (index < count - 1)
				{
					sb.AppendLine();
				}
			}

			return sb.ToString();
		}

		private string ToValidName (string rawName)
		{
			string processed = rawName.Replace(" ", "");
			processed = Regex.Replace(processed, "[^a-zA-Z0-9_]", "");

			if (processed.Length > 0 && char.IsDigit(processed[0]))
			{
				processed = "_" + processed;
			}

			if (processed.Length > 1)
			{
				processed = char.ToUpper(processed[0]) + processed[1..];
			}
			else
			{
				processed = processed.ToUpper();
			}

			return processed;
		}
	}
}